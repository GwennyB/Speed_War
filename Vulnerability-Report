# Vulnerability Report 

## 1 - SQL Injection
- SQL injection must be handled carefully, as concatinating SQL strings can lead to security vunerabilities. 
- In our code, we have chosen to use Lamda expressions instead of SQL statements, removing the vulnerability from our code.
`
Example:
We used:
```
deck => deck.UserID == userID && deck.DeckType == deckType
```
Instead of:
```
string stringQuery = "SELECT * FROM Decks WHERE UserID == " + userID + " AND DeckType == " + deckType ";
```
`

## 2 - Weak Account management

## 3 - Cross Site Scripting

## 4 - Insecure Direct object references

## 5 - Security Misconfiguration

## 6 - Sensitive data exposure

## 7 - Missing function level access control

## 8 - Cross site request forgery

## 9 - Unvalidated redirects and forwards